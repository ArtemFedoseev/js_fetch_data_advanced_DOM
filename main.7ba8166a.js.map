{"version":3,"sources":["scripts/main.js"],"names":["LIST_URL","DETAILS_BASE_URL","getListOfIds","Promise","resolve","fetch","then","res","json","list","map","item","id","fetchDetails","url","reject","ok","Error","details","catch","error","getFirstReceivedDetails","listOfIds","race","getAllSuccessfulDetails","allSettled","results","filter","result","status","value","pushNotification","header","data","useClass","root","document","querySelector","notification","createElement","classList","add","innerHTML","toUpperCase","join","append"],"mappings":";AAAA,aAEA,IAAMA,EAAW,wEAEXC,EAAmB,mEAGnBC,EAAe,WAOZ,OAAA,IAAIC,QANM,SAASC,GACxBC,MAAML,GACHM,KAAK,SAAAC,GAAOA,OAAAA,EAAIC,SAChBF,KAAK,SAAAG,GAAQL,OAAAA,EAAQK,EAAKC,IAAI,SAAAC,GAAQA,OAAAA,EAAKC,WAM5CC,EAAe,SAASD,GACtBE,IAAAA,EAASb,GAAAA,OAAAA,EAAoBW,KAAAA,OAAAA,EAAnC,SAcO,OAAA,IAAIT,QAbM,SAASC,EAASW,GACjCV,MAAMS,GACHR,KAAK,SAAAC,GACAA,GAAAA,EAAIS,GACCT,OAAAA,EAAIC,OAEL,MAAA,IAAIS,MAAM,wBAGnBX,KAAK,SAAAY,GAAWd,OAAAA,EAAQc,KACxBC,MAAM,SAAAC,GAASL,OAAAA,EAAOK,QAMvBC,EAA0B,SAASC,GAChCnB,OAAAA,QAAQoB,KAAKD,EAAUZ,IAAI,SAAAE,GAAMC,OAAAA,EAAaD,OAGjDY,EAA0B,SAASF,GAChCnB,OAAAA,QAAQsB,WAAWH,EAAUZ,IAAI,SAAAE,GAAMC,OAAAA,EAAaD,MACxDN,KAAK,SAAAoB,GACGA,OAAAA,EAAQC,OAAO,SAAAC,GAAUA,MAAkB,cAAlBA,EAAOC,SACpCnB,IAAI,SAAAC,GAAQA,OAAAA,EAAKmB,WAIpBC,EAAmB,SAASC,EAAQC,EAAMC,GACxCC,IAAAA,EAAOC,SAASC,cAAc,QAC9BC,EAAeF,SAASG,cAAc,OAE5CD,EAAaE,UAAUC,IAAIP,GAE3BI,EAAaI,UACLV,aAAAA,OAAAA,EAEFC,2BAAAA,OAAAA,EAAKvB,IAAI,SAAAC,GAAeA,MAAAA,OAAAA,OAAAA,EAAKC,GAAG+B,cAAnB,WAAyCC,KAAK,IAHjE,mBAOAT,EAAKU,OAAOP,IAGdpC,IACGI,KAAK,SAAAG,GAAQY,OAAAA,EAAwBZ,KACrCH,KAAK,SAAAY,GACJa,EAAiB,iBAAkB,CAACb,GAAU,oBAGlDhB,IACGI,KAAK,SAAAG,GAAQe,OAAAA,EAAwBf,KACrCH,KAAK,SAAAY,GACJa,EAAiB,iBAAkBb,EAAS","file":"main.7ba8166a.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\r\n\r\nconst LIST_URL = 'https://mate-academy.github.io'\r\n  + '/phone-catalogue-static/api/phones.json';\r\nconst DETAILS_BASE_URL = 'https://mate-academy.github.io/'\r\n  + 'phone-catalogue-static/api/phones';\r\n\r\nconst getListOfIds = function() {\r\n  const resolver = function(resolve) {\r\n    fetch(LIST_URL)\r\n      .then(res => res.json())\r\n      .then(list => resolve(list.map(item => item.id)));\r\n  };\r\n\r\n  return new Promise(resolver);\r\n};\r\n\r\nconst fetchDetails = function(id) {\r\n  const url = `${DETAILS_BASE_URL}/${id}.json`;\r\n  const resolver = function(resolve, reject) {\r\n    fetch(url)\r\n      .then(res => {\r\n        if (res.ok) {\r\n          return res.json();\r\n        } else {\r\n          throw new Error('Some error occured');\r\n        }\r\n      })\r\n      .then(details => resolve(details))\r\n      .catch(error => reject(error));\r\n  };\r\n\r\n  return new Promise(resolver);\r\n};\r\n\r\nconst getFirstReceivedDetails = function(listOfIds) {\r\n  return Promise.race(listOfIds.map(id => fetchDetails(id)));\r\n};\r\n\r\nconst getAllSuccessfulDetails = function(listOfIds) {\r\n  return Promise.allSettled(listOfIds.map(id => fetchDetails(id)))\r\n    .then(results => {\r\n      return results.filter(result => result.status === 'fulfilled')\r\n        .map(item => item.value);\r\n    });\r\n};\r\n\r\nconst pushNotification = function(header, data, useClass) {\r\n  const root = document.querySelector('body');\r\n  const notification = document.createElement('div');\r\n\r\n  notification.classList.add(useClass);\r\n\r\n  notification.innerHTML = `\r\n    <h3>${header}</h3>\r\n    <ul>\r\n      ${data.map(item => `<li>${item.id.toUpperCase()}</li>`).join('')}\r\n    </ul>\r\n  `;\r\n\r\n  root.append(notification);\r\n};\r\n\r\ngetListOfIds()\r\n  .then(list => getFirstReceivedDetails(list))\r\n  .then(details => {\r\n    pushNotification('First Received', [details], 'first-received');\r\n  });\r\n\r\ngetListOfIds()\r\n  .then(list => getAllSuccessfulDetails(list))\r\n  .then(details => {\r\n    pushNotification('All Successful', details, 'all-successful');\r\n  });\r\n"]}